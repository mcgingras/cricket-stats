'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = scuttlebuttServer;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INFILE = process.env['INFILE'],
    OUTFILE = process.env['OUTFILE'],
    REMOTE_SB = process.env['REMOTE_SB'];

var defaultOptions = {
  connectRedux: connectRedux,
  getStatistics: getStatistics,
  primusOptions: {},
  dispatcherOptions: {}
};

function scuttlebuttServer(server, options) {
  options = _extends({}, defaultOptions, options);

  var primusServer = new (require('primus'))(server, options.primusOptions),
      Dispatcher = require('./dispatcher').default,
      gossip = new Dispatcher(options.dispatcherOptions),
      onStatistic = options.getStatistics();

  // connect dispatcher to redux
  options.connectRedux(gossip);

  // read actions from file
  if (INFILE) {
    var gossipWriteSteam = gossip.createWriteStream();
    _fs2.default.createReadStream(INFILE).pipe(gossipWriteSteam);

    console.log('ðŸ“¼  Reading from ' + INFILE);
  }

  // stream actions to file -- this will include all actions in INFILE
  if (OUTFILE) {
    (function () {
      var gossipReadSteam = gossip.createReadStream();

      // For some reason, we're not getting any 'sync' events from Dispatcher,
      // so we'll listen for it in the datastream and write to disk after it
      // <https://github.com/dominictarr/scuttlebutt#persistence>

      gossipReadSteam.on('data', function (data) {
        if (data === '"SYNC"\n') {
          console.log('ðŸ“¼  Writing to ' + OUTFILE);
          gossipReadSteam.pipe(_fs2.default.createWriteStream(OUTFILE));
        }
      });

      // this doesn't fire.
      gossip.on('sync', function () {
        console.log('ðŸ“¼  [NATURAL SYNC] Writing to ' + OUTFILE);
        gossipReadSteam.pipe(_fs2.default.createWriteStream(OUTFILE));
      });

      console.log('ðŸ“¼  Ready to write to ' + OUTFILE);
    })();
  }

  // connect to remote redux-scuttlebutt instance
  if (REMOTE_SB) {
    var remoteStream = gossip.createStream(),
        remoteClient = new primusServer.Socket(REMOTE_SB);

    console.log('ðŸ’¡  connecting to remote ' + REMOTE_SB);

    remoteClient.pipe(remoteStream).pipe(remoteClient);

    onStatistic('REMOTE_SB', 'connect');

    remoteClient.on('data', function recv(data) {
      // console.log('[io]', 'REMOTE_SB', '<-', data);
      onStatistic('REMOTE_SB', 'recv');
    });

    remoteStream.on('data', function (data) {
      // console.log('[io]', 'REMOTE_SB' || 'origin', '->', data);
      onStatistic('REMOTE_SB', 'sent');
    });

    remoteStream.on('error', function (error) {
      onStatistic('REMOTE_SB', 'error', error);
      console.log('[io]', 'REMOTE_SB', 'ERROR:', error);
      remoteClient.end('Disconnecting due to error', { reconnect: true });
    });
  }

  primusServer.on('connection', function (spark) {
    var stream = gossip.createStream();

    // console.log('[io] connection', spark.address, spark.id)

    onStatistic(spark.id, 'connect');

    spark.on('data', function recv(data) {
      // console.log('[io]', spark.id, '<-', data);
      onStatistic(spark.id, 'recv');
      stream.write(data);
    });

    stream.on('data', function (data) {
      // console.log('[io]', spark.id || 'origin', '->', data);
      onStatistic(spark.id, 'sent');
      spark.write(data);
    });

    stream.on('error', function (error) {
      onStatistic(spark.id, 'error', error);
      console.log('[io]', spark.id, 'ERROR:', error);
      spark.end('Disconnecting due to error', { reconnect: true });
    });
  });

  primusServer.on('disconnection', function (spark) {
    onStatistic(spark.id, 'disconnect');
    // in case you don't want to track zombie connections
    // delete statistics[spark.id]
  });
}

function connectRedux(gossip) {
  var Redux = require('redux'),
      reducer = function reducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var action = arguments[1];
    return state.concat(action);
  },
      store = Redux.createStore(gossip.wrapReducer(reducer), undefined),
      dispatch = gossip.wrapDispatch(store.dispatch),
      getState = gossip.wrapGetState(store.getState);

  // other things we might want to do ->
  // store.subscribe(render)
  // setInterval(function () { dispatch({ type: 'TICK' }) }, 1000)
}

function getStatistics() {
  var statistics = {};

  var statisticsDirty = true;

  // prime statistics for when spark.id is undefined, presumably server messages
  statistics[undefined] = {
    recv: 0, sent: 0, s: 'other'
  };

  setInterval(function () {
    if (!statisticsDirty) return;

    statisticsDirty = false;

    /*
    // full client statistics
    console.log('# ' + (new Date()) + '')
    for (let spark in statistics) {
      console.log(`${spark}: ${statistics[spark].recv} recv ${statistics[spark].sent} sent (${statistics[spark].s})`)
    }
    */

    // basic statistics
    console.log([new Date().toLocaleString('en-AU'), ': ', function () {
      var recv = 0,
          sent = 0,
          connected = 0,
          disconnected = 0,
          other = 0;
      for (var spark in statistics) {
        recv += statistics[spark].recv;
        sent += statistics[spark].sent;

        if (statistics[spark].s === 'connected') connected++;else if (statistics[spark].s === 'disconnected') disconnected++;else other++;
      }

      return 'recv ' + recv + ', sent ' + sent + ', (' + connected + ' \uD83C\uDF0F, ' + disconnected + ' \uD83D\uDD15, ' + other + ' \uD83D\uDC65)';
    }()].join(''));
  }, 10000); // max 6/minute

  return function (source, event, extra) {
    statisticsDirty = true;
    if (event === 'connect') {
      statistics[source] = {
        recv: 0, sent: 0, s: 'connected'
      };
    } else if (event === 'disconnect') {
      statistics[source] = {
        recv: 0, sent: 0, s: 'disconnected'
      };
    } else if (event === 'error') {
      statistics[source] = {
        recv: 0, sent: 0, s: 'error', err: extra
      };
    } else if (event === 'recv' || event === 'sent') {
      statistics[source][event]++;
    }
  };
}