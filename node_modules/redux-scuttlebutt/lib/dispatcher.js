'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

exports.isGossipType = isGossipType;

var _scuttlebuttVector = require('scuttlebutt-vector');

var _scuttlebuttVector2 = _interopRequireDefault(_scuttlebuttVector);

var _orderedHistory = require('./orderedHistory');

var orderedHistory = _interopRequireWildcard(_orderedHistory);

var _getDelayedDispatch = require('./getDelayedDispatch');

var _getDelayedDispatch2 = _interopRequireDefault(_getDelayedDispatch);

var _constants = require('./constants');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// ignore actiontypes beginning with @
// by default just pass through missing types (redux will blow up later)
function isGossipType() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  return type.substr(0, 1) !== '@';
}

var defaultOptions = {
  customDispatch: _getDelayedDispatch2.default,
  isGossipType: isGossipType,
  verifyAsync: undefined,
  signAsync: undefined
};

var Dispatcher = function (_Scuttlebutt) {
  _inherits(Dispatcher, _Scuttlebutt);

  function Dispatcher(options) {
    _classCallCheck(this, Dispatcher);

    var _this = _possibleConstructorReturn(this, (Dispatcher.__proto__ || Object.getPrototypeOf(Dispatcher)).call(this));

    _this.options = _extends({}, defaultOptions, options);

    _this._customDispatch = _this.options.customDispatch && _this.options.customDispatch(_this);

    _this._isGossipType = _this.options.isGossipType;

    _this._verifyAsync = _this.options.verifyAsync;
    _this._signAsync = _this.options.signAsync;

    // redux methods to wrap
    _this._reduxDispatch = function () {
      throw new Error('Are you sure you called wrapDispatch?');
    };
    _this._reduxGetState = function () {
      // throw new Error('Are you sure you called wrapGetState?')
      // this must return a default state for the very first history call,
      // before .wrapGetState has been applied in the store enhancer.
      return [];
    };
    return _this;
  }

  // wraps the redux dispatch


  _createClass(Dispatcher, [{
    key: 'wrapDispatch',
    value: function wrapDispatch(dispatch) {
      var _this2 = this;

      this._reduxDispatch = dispatch;

      return function (action) {
        // apply this action to our scuttlebutt model (and send to peers). It
        // will dispatch, taking care of the the appropriate time ordering
        if (_this2._isGossipType(action.type)) {
          _this2.localUpdate(action);
        } else {
          return dispatch(action);
        }
      };
    }

    // wraps getState to the state within orderedHistory

  }, {
    key: 'wrapGetState',
    value: function wrapGetState(getState) {
      this._reduxGetState = getState;

      return function () {
        return orderedHistory.getState(getState());
      };
    }

    // wraps the initial state, if any, into the first snapshot

  }, {
    key: 'wrapInitialState',
    value: function wrapInitialState(initialState) {
      return orderedHistory.getInitialState(initialState);
    }

    // rewinds history when it changes

  }, {
    key: 'wrapReducer',
    value: function wrapReducer(reducer) {
      var _this3 = this;

      this._historyReducer = orderedHistory.reducer(reducer);

      // wrap the root reducer to track history and rewind occasionally
      return function (currentState, action) {
        return _this3._historyReducer(currentState, action);
      };
    }

    // Apply update (action) to our store
    // implemented for scuttlebutt class

  }, {
    key: 'applyUpdate',
    value: function applyUpdate(update) {
      var _this4 = this;

      var _update = _slicedToArray(update, 3),
          action = _update[0],
          timestamp = _update[1],
          source = _update[2],
          localAction = _extends({ meta: {} }, action),
          dispatch = function dispatch(shouldApply) {
        if (!shouldApply) {
          return;
        } else if (_this4._customDispatch) {
          _this4._customDispatch(localAction);
        } else {
          _this4._reduxDispatch(localAction);
        }
      };

      // add our metadata to the action as non-enumerable properties. This is so
      // they won't be serialised into JSON when sent over the network to peers in
      // this.history(), and can be added back by other peers as they receive
      // them


      Object.defineProperty(localAction.meta, _constants.META_TIMESTAMP, {
        enumerable: false,
        value: timestamp
      });

      Object.defineProperty(localAction.meta, _constants.META_SOURCE, {
        enumerable: false,
        value: source
      });

      if (this._verifyAsync) {
        this._verifyAsync(dispatch, localAction, this._reduxGetState);
      } else {
        dispatch(true);
      }

      // recieved message succesfully. if false, peers may retry the message.
      return true;
    }

    // reply to gossip with the latest timestamps for the sources we've seen
    // implemented for scuttlebutt class

  }, {
    key: 'history',
    value: function history(sources) {
      var _this5 = this;

      // our state (updates[]) has a similar shape to scuttlebutt's own updates.
      return this._reduxGetState().reduce(function (arr, update) {
        if (update[_constants.UPDATE_ACTION] && _this5._isGossipType(update[_constants.UPDATE_ACTION].type) && (0, _scuttlebuttVector.filter)(update, sources)) {
          // scuttlebutt only wants ACTION, TIMESTAMP, SOURCE, and not: SNAPSHOT
          arr.push(update.slice(0, 3));
        }

        return arr;
      }, []);
    }

    // apply an update locally
    // we should ensure we don't send objects which will explode JSON.parse here
    // implemented over scuttlebutt class

  }, {
    key: 'localUpdate',
    value: function localUpdate(action) {
      if (this._signAsync) {
        this._signAsync(_get(Dispatcher.prototype.__proto__ || Object.getPrototypeOf(Dispatcher.prototype), 'localUpdate', this).bind(this), action, this._reduxGetState);
      } else {
        _get(Dispatcher.prototype.__proto__ || Object.getPrototypeOf(Dispatcher.prototype), 'localUpdate', this).call(this, action);
      }
    }
  }]);

  return Dispatcher;
}(_scuttlebuttVector2.default);

exports.default = Dispatcher;